/*
 * Copyright 2010-2016 the original author or authors.
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 文件：jetsennet.wfm.schema.Transexec.java
 * 日 期：Thu Oct 09 15:09:00 CST 2014
 */
package jetsennet.wfm.schema;

import java.io.Serializable;
import org.uorm.orm.annotation.ClassMapping;
import org.uorm.orm.annotation.FieldMapping;

/**
 *
 * WFM_TRANSEXEC
 * this file is generated by the uorm pojo tools.
 *
 * @author <a href="mailto:xunchangguo@gmail.com">郭训常</a>
 * @version 1.0.0
 */
@ClassMapping(tableName = "WFM_TRANSEXEC", keyOrder = "nexttaskId,taskId")
public class Transexec implements Serializable {
	
	private static final long serialVersionUID = 1L;
	
	public static String PROP_FIELD_1 = "FIELD_1";
	public static String PROP_NEXTTASK_ID = "NEXTTASK_ID";
	public static String PROP_TASK_ID = "TASK_ID";
	public static String PROP_TRANS_RULE = "TRANS_RULE";
	
	/**
	 * primary key field of nexttaskId
	 */
	@FieldMapping(columnName = "NEXTTASK_ID", columnType = 12, primary = true)
	private String nexttaskId;
	/**
	 * primary key field of taskId
	 */
	@FieldMapping(columnName = "TASK_ID", columnType = 12, primary = true)
	private String taskId;
	@FieldMapping(columnName = "FIELD_1", columnType = 12)
	private String field1;
	@FieldMapping(columnName = "TRANS_RULE", columnType = 12)
	private String transRule;
	
	public Transexec() {
		super();
	}

	public Transexec(String nexttaskId, String taskId) {
		this.nexttaskId = nexttaskId;
		this.taskId = taskId;
	}

	/**
	 * @return the field1
	 */
	public String getField1() {
		return this.field1;
	}
	
	/**
	 * @param field1 the field1 to set
	 */
	public void setField1(String field1) {
		this.field1 = field1;
	}

	/**
	 * @return the nexttaskId
	 */
	public String getNexttaskId() {
		return this.nexttaskId;
	}
	
	/**
	 * @param nexttaskId the nexttaskId to set
	 */
	public void setNexttaskId(String nexttaskId) {
		this.nexttaskId = nexttaskId;
	}

	/**
	 * @return the taskId
	 */
	public String getTaskId() {
		return this.taskId;
	}
	
	/**
	 * @param taskId the taskId to set
	 */
	public void setTaskId(String taskId) {
		this.taskId = taskId;
	}

	/**
	 * @return the transRule
	 */
	public String getTransRule() {
		return this.transRule;
	}
	
	/**
	 * @param transRule the transRule to set
	 */
	public void setTransRule(String transRule) {
		this.transRule = transRule;
	}

	/* (non-Javadoc)
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object o) {
		if ((o == null) || !(o instanceof Transexec)) {
			return false;
		}
		Transexec other = (Transexec)o;
		if (null == this.nexttaskId) {
			if (other.nexttaskId != null)
				return false;
		} else if (!this.nexttaskId.equals(other.nexttaskId))
			return false;
		if (null == this.taskId) {
			if (other.taskId != null)
				return false;
		} else if (!this.taskId.equals(other.taskId))
			return false;
		return true;
	}
	
	/* (non-Javadoc)
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((nexttaskId == null) ? 0 : nexttaskId.hashCode());
		result = prime * result + ((taskId == null) ? 0 : taskId.hashCode());
		return result;
	}
	
}